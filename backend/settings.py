"""
Django settings for signlan project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
import os

import environ
env = environ.Env()
# from django.contrib.auth.models import UserData
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-cr)vvqzsg7##)a1e=mu1e0x#_(kyov96bdsr_1z_wfa()+niof"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '*'
]

CORS_ORIGIN_WHITELIST = ['http://localhost:3000','http://localhost:80'

]


CORS_ORIGIN_ALLOW_ALL = True
# Application definition

CORS_ALLOW_HEADERS = [
    'access',
    'Content-Type',
]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
 
    'signlanguage',
    'users',
    'ranks',
    # 'users.apps.usersConfig',
    'storages',
    'corsheaders', #CorsError
    'channels',
    'rest_framework',
     'rest_framework_simplejwt',
     'incorrect_note',
    #  'rest_framework_simplejwt.token_blacklist'
]

REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': (
  
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
   
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=2),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'TOKEN_USER_CLASS': 'users.User', 
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
}


# AUTH_USER_MODEL = 'backend.user'

ASGI_APPLICATION = 'backend.routing.application'	# backend 는 django 프로젝트 이름

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', #CorsError
    
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    #"django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': os.environ.get('SQL_ENGINE', 'django.db.backends.mysql'),
        # 'NAME': os.environ.get('SQL_DATABASE', os.path.join(BASE_DIR, 'db.sqlite3')),
        'NAME': os.environ.get('SQL_DATABASE', 'suquiz'),
        'USER': os.environ.get('SQL_USER', 'secret'), 
        'PASSWORD': os.environ.get('MYSQL_ROOT_PASSWORD', 'secret'),
        'HOST': os.environ.get('SQL_HOST', 'secret'),
        'PORT': os.environ.get('SQL_PORT', '3306'),
        # 'OPTIONS':{
        #     'init_command':'SET sql_mode="STATIC_TRANS_TABLES"'
        # }
    }
}
AUTH_USER_MODEL = 'users.UserData'

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = False

SESSION_COOKIE_SECURE = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    STATIC_DIR,
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_STORAGE_BUCKET_NAME = 'suquiz2023'

AWS_ACCESS_KEY_ID=env.str("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY=env.str("AWS_SECRET_ACCESS_KEY")

CORS_ORIGIN_ALLOW_ALL = True
# Application definition

CORS_ALLOW_HEADERS = [
    'access',
    'Content-Type',
]